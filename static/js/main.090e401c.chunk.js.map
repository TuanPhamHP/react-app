{"version":3,"sources":["components/Task.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","listitems","items","map","param","name","key","className","type","id","value","text","onChange","e","changeValue","target","onClick","therestitem","duration","easing","TaskList","state","conTent","textAdded","bind","itemAdded","theRestItems","this","setState","Date","now","preventDefault","newTask","console","log","newitems","filter","itemlist","ptext","pkey","nitems","item","onSubmit","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAsBeA,MAnBf,SAAcC,GACV,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OAAO,yBAAKC,KAAMD,EAAME,IAAKA,IAAKF,EAAME,IAAKC,UAAU,SACvD,8BACI,2BAAOC,KAAK,OAAOF,IAAKF,EAAME,IAAKG,GAAIL,EAAME,IAAKI,MAAON,EAAMO,KAAOC,SAAU,SAACC,GAAMb,EAAMc,YAAYD,EAAEE,OAAOL,MAAON,EAAME,QAC/H,0BAAMC,UAAU,aAAaS,QAAS,kBAAKhB,EAAMiB,YAAYb,EAAME,OAAnE,UAIR,OACI,yBAAKC,UAAU,cACX,kBAAC,IAAD,CAAUW,SAAU,IAAKC,OAAO,eAC3BlB,KC4DFmB,G,wDAvEX,WAAYpB,GAAO,IAAD,8BACd,cAAMA,IACDqB,MAAM,CACPnB,MAAQ,GACRoB,QAAS,CACLX,KAAO,GACPL,IAAK,KAGb,EAAKiB,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKV,YAAc,EAAKA,YAAYU,KAAjB,gBAZL,E,sDAeRX,GACNc,KAAKC,SAAS,CACVN,QAAQ,CACJX,KAAOE,EAAEE,OAAOL,MAChBJ,IAAKuB,KAAKC,W,gCAIZjB,GACNA,EAAEkB,iBACF,IAAMC,EAAUL,KAAKN,MAAMC,QAE3B,GADAW,QAAQC,IAAIF,GACS,KAAjBA,EAAQrB,KAAa,CACrB,IAAMwB,EAAQ,sBAAOR,KAAKN,MAAMnB,OAAlB,CAAyB8B,IACvCL,KAAKC,SAAS,CACV1B,MAAOiC,EACPb,QAAQ,CACJX,KAAK,GACLL,IAAK,S,mCAKRA,GACT,IAAMoB,EAAeC,KAAKN,MAAMnB,MAAMkC,QAAO,SAAAC,GAAQ,OAAIA,EAAS/B,MAAQA,KAC1EqB,KAAKC,SAAS,CACV1B,MAAMwB,IAEVO,QAAQC,IAAIR,K,kCAEJY,EAAOC,GACf,IAAMC,EAASb,KAAKN,MAAMnB,MAC1BsC,EAAOrC,KAAI,SAAAsC,GACHA,EAAKnC,KAAOiC,IACZE,EAAK9B,KAAO2B,MAGpBX,KAAKC,SAAS,CACV1B,MAAOsC,M,+BAIX,OACI,6BACG,0BAAM/B,GAAG,aAAaiC,SAAUf,KAAKF,WACrC,yBAAKlB,UAAU,cACf,2BAAOE,GAAG,MAAMD,KAAK,OAAOmC,YAAY,mBAAmBjC,MAAQiB,KAAKN,MAAMC,QAAQX,KAAMC,SAAUe,KAAKJ,YACvG,4BAAQf,KAAK,SAASC,GAAG,WAAzB,QAEJ,kBAAC,EAAD,CAAMP,MAAOyB,KAAKN,MAAMnB,MAAOe,YAAeU,KAAKD,aAAcZ,YAAaa,KAAKb,oB,GAjE3E8B,cCORC,MARf,WACE,OACE,yBAAKtC,UAAU,OACf,kBAAC,EAAD,QCMgBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.090e401c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Task.css'\r\nimport Flipmove from 'react-flip-move'\r\nfunction Task(props) {\r\n    const items = props.items\r\n    const listitems = items.map(param =>{\r\n        return <div name={param.key} key={param.key} className=\"tasks\" >\r\n        <span>\r\n            <input type=\"text\" key={param.key} id={param.key} value={param.text}  onChange={(e)=>{ props.changeValue(e.target.value, param.key)}}/>\r\n            <span className=\"remove-btn\" onClick={()=> props.therestitem(param.key)}>X</span>\r\n        </span>\r\n        </div>\r\n    } )\r\n    return (\r\n        <div className=\"list-tasks\" >\r\n            <Flipmove duration={400} easing=\"ease-in-out\">\r\n                {listitems}\r\n            </Flipmove>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React, { Component } from 'react'\r\nimport Task from './Task'\r\nimport './Tasklist.css'\r\n\r\nclass TaskList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            items : [],\r\n            conTent: {\r\n                text : '',\r\n                key :''\r\n            }\r\n        }\r\n        this.textAdded = this.textAdded.bind(this)\r\n        this.itemAdded = this.itemAdded.bind(this)\r\n        this.theRestItems = this.theRestItems.bind(this)\r\n        this.changeValue = this.changeValue.bind(this)\r\n\r\n    }\r\n    textAdded(e){\r\n        this.setState({\r\n            conTent:{\r\n                text : e.target.value,\r\n                key: Date.now()\r\n            }\r\n        })\r\n    }\r\n    itemAdded(e){\r\n        e.preventDefault();\r\n        const newTask = this.state.conTent\r\n        console.log(newTask)\r\n        if (newTask.text !== '') {\r\n            const newitems = [...this.state.items, newTask];  //destructring assign\r\n            this.setState({\r\n                items: newitems,\r\n                conTent:{\r\n                    text:'',\r\n                    key :''\r\n                }\r\n            })\r\n        }\r\n    }\r\n    theRestItems(key){\r\n        const theRestItems = this.state.items.filter(itemlist => itemlist.key !== key);\r\n        this.setState({\r\n            items:theRestItems,\r\n        })\r\n        console.log(theRestItems)\r\n    }\r\n    changeValue(ptext, pkey){\r\n        const nitems = this.state.items;\r\n        nitems.map(item =>{\r\n            if (item.key == pkey) {\r\n                item.text = ptext;\r\n            }\r\n        })\r\n        this.setState({\r\n            items: nitems\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n               <form id=\"to-do-form\" onSubmit={this.itemAdded}>\r\n               <div className=\"input-wrap\">\r\n               <input id='inp' type=\"text\" placeholder=\"Note your things\" value= {this.state.conTent.text} onChange={this.textAdded} />\r\n                   <button type=\"submit\" id=\"add-btn\"> + </button>\r\n               </div>\r\n               <Task items={this.state.items} therestitem = {this.theRestItems} changeValue={this.changeValue}></Task>\r\n               </form>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TaskList;","import React from 'react';\nimport TaskList from './components/TaskList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <TaskList></TaskList>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}